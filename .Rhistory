################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE50478", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL1355", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "11111XXXXXX00000XXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
gset <- getGEO("GSE50478", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL1355", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- "11111XXXXXX00000XXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  set group names
sml <- paste("G", sml, sep="")  #set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("NRBC","9L")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50478", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
View(gset)
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
# R scripts generated  Fri Jun 7 09:39:06 EDT 2019
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE50478", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL1355", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "11111XXXXXX00000XXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE50478", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL1355", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- "11111XXXXXX00000XXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  #set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("NRBC","9L")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50478", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
# R scripts generated  Fri Jun 7 09:48:40 EDT 2019
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE50478", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL1355", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "11111XXXXXX00000XXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE50478", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL1355", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- "11111XXXXXX00000XXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  #set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("NRBC","9L")
# set parameters and draw the plot
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50478", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
# R scripts generated  Fri Jun 7 11:45:07 EDT 2019
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE50478", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL1355", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "11111XXXXXX00000XXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE50478", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL1355", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- "11111XXXXXX00000XXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  #set group names
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("Normal+Brain","9L+Glioma")
# set parameters and draw the plot
palette(c("#f4dfdf","#dfeaf4", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE50478", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
as.Date("04/27/2020","%m/%d/%y")+45
as.Date("05/12/2020","%m/%d/%y")+60
counties=read.csv("https://github.com/nytimes/covid-19-data/raw/master/us-counties.csv")
counties$realdate=as.Date(strptime(counties$date,"%Y-%m-%d"))
wa.fips=sort(unique(counties$fips[which(counties$fips>=53000&counties$fips<54000)]))
wa.county=character()
for (i in 1:length(wa.fips)){
wa.county[i]=as.character(counties$county[min(which(counties$fips==wa.fips[i]))])
}
wa.dates=seq.Date(from=as.Date("03/15/20","%m/%d/%y"),to=max(counties$realdate),by=1)
wa.mat=matrix(data=0,nrow=length(wa.dates),ncol=length(wa.county))
for (j in 1:length(wa.county)){
from.date=which(wa.dates==min(counties$realdate[which(counties$fips==wa.fips[j])]))
to.date=which(wa.dates==max(counties$realdate[which(counties$fips==wa.fips[j])]))
if (length(from.date)==0){from.date=1}
if (from.date<14){
for (i in from.date:(14+from.date)){
wa.mat[i,j]=counties$cases[which(counties$fips==wa.fips[j]&counties$realdate==wa.dates[i])]/pop$POPESTIMATE2019[pop$FIPS==wa.fips[j]]*100000
}
}
for (i in (15+from.date):to.date){
wa.mat[i,j]=(counties$cases[which(counties$fips==wa.fips[j]&counties$realdate==wa.dates[i])]-
counties$cases[which(counties$fips==wa.fips[j]&counties$realdate==wa.dates[i-14])])/
pop$POPESTIMATE2019[pop$FIPS==wa.fips[j]]*100000
}
}
pdf("COVID_cases.pdf",paper="letter")
plot(wa.mat[,wa.county=="Skagit"]~wa.dates,type="l",ylab="Cases per 100000 in previous 2 wks",ylim=c(0,150),
main=paste("as of",max(counties$realdate)),xlab="")
lines(wa.mat[,wa.county=="Walla Walla"]~wa.dates,lty=2)
lines(wa.mat[,wa.county=="Island"]~wa.dates,lty=1,col="grey")
lines(wa.mat[,wa.county=="San Juan"]~wa.dates,lty=2,col="grey")
legend(as.Date("05/30/20","%m/%d/%y"),150,legend=c("Skagit", "Walla Walla","Island","San Juan"),
lty=c(1,2,1,2),col=c("black","black","grey","grey"),bg="#ffffff00",box.lwd=0)
abline(h=25,col="red")
dev.off()
install.packages("rwty")
ls()
my.trees <- load.multi("mb/", format = "mb")
library(rwty)
library(ape)
library(xlsx)
library(insect)
library(aphid)
library(DECIPHER)
library(magrittr)
library(phangorn)
library(rwty)
my.trees <- load.multi("mb/", format = "mb")
install.packages("respirometry")
citation(package = "respirometry")
BiocManager::install("sangeranalyseR")
install.packages("units")
install.packages("units")
install.packages("aqp")
install.packages("stringi")
install.packages("aqp")
install.packages("knitr")
install.packages("limma")
install.packages("rgdal")
install.packages("rgdal")
install.packages("sf")
install.packages("oce")
install.packages("seacarb")
BiocManager::install("sangeranalyseR")
.libPaths()
install.packages("boot")
install.packages(c("codetools", "KernSmooth", "nlme", "spatial"))
BiocManager::install("sangeranalyseR")
BiocManager::install("sangerseqR")
install_github("roblanf/sangeranalyseR")
library(remotes)
install_github("roblanf/sangeranalyseR")
Sys.Date()
Sys.Date()+60
install.packages("remotes")
library(remotes)
install_version('seacarb',version="3.2.14")
library(seacarb)
?at
resp.closed
library(OTools)
resp.closed
resp.closed=function(x, volume, weight, channel=1, back=0, smooth=0){
coeff=dnorm(seq(from=-3,to=3,length.out=smooth+1))/sum(dnorm(seq(from=-3,to=3,length.out=smooth+1)))
work=x[complete.cases(x[,3+channel]),]
work[,3+channel]=filter(work[,3+channel],coeff,sides=2)
elap=as.numeric(difftime(work$time[4],work$time[3],units="secs"))
clock=work$times[2:nrow(work)]-work$times[1:(nrow(work)-1)]
back1=back*(elap/60)
oxy=work[1:(nrow(work)-1),channel+3]-work[2:nrow(work),channel+3]-back1
resp=((oxy*(3600/elap))*volume)/weight
time=work$times[2:nrow(work)]
conc=work[2:nrow(work),channel+3]
if(ncol(x)>11){
kPa=umolO2L(conc,temp=work[2:nrow(work),channel+7],atmP=work$pressure[2:nrow(work)])$kPa
} else {
kPa=umolO2L(conc,temp=work[2:nrow(work),channel+7])$kPa
}
final=data.frame(cbind(time,conc,kPa,resp))
colnames(final)=c("times","oxy","po2","resp")
return(final)
}
library(OTools)
muus.resp=resp.closed(muus.pc,3,70,smooth=10)
# Pcrit
muus.pc=read.pyro("gr3 muus 1800 7day Pcrit 7-20-21.txt")
setwd("~/Documents/Scholarly_Writing/hypercapnia_octopus_Short_v_long/Graphs/pcrits")
setwd("~/Documents/Research/Muusoctopus_leioderma_respiration")
list.files()
list.files(recursive=T)
files=list.files(recursive=T)
grep(".txt",files)
grep(".txt",files,value=T)
library(OTools)
resp.files=grep(".txt",files,value=T)
grep("pcrit",resp.files,value=T)
resp.files
grep("pcrit",resp.files,value=T,ignore.case=T)
pcrit.files=grep("pcrit",resp.files,value=T,ignore.case=T)
setdiff(resp.files,pcrit.files)
rmr.files=setdiff(resp.files,pcrit.files)
